package id.jsusilo.example.ta;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.util.Log;
import android.widget.ArrayAdapter;
import android.widget.ListView;
import android.widget.Toast;

import com.eyro.cubeacon.activity.CBAppCompatActivity;
import com.eyro.cubeacon.constant.CBCampaignType;
import com.eyro.cubeacon.model.CBBeacon;

import java.util.ArrayList;
/**
 * Created by jsusilo on 12/07/16.
 */
public class ScanBeaconActivity extends CBAppCompatActivity {
    private static final String TAG = "ScanBeaconActivity";
    public ArrayList<CBBeacon> ListBeacon;
    ListView beaconlistView;
    ArrayAdapter<CBBeacon> adapter;
    //double positions[][] = {{4.0,7.0},{6.0,3.0},{14.0,8.0},{13.0,2.0},{17.0,3.0},{21.0,10.0}};
    //lailatul
    //double positions[][] = {{6.5,12.5},{0.5,6.5},{5.5,0.5}};
    //FO
    //double ruang1[][] = {{3.0,5.0},{5.0,6.0},{3.0,8.0},{5.0,8.0}};
    //ruang kerja 1
    //double ruang2[][] = {{4.0,1.0},{9.0,1.0},{4.0,5.0},{9.0,5.0}};
    //ruang kerja 2
    //double ruang3[][] = {{11.0,6.0},{17.0,6.0}, {11.0,10.0}, {17.0,10.0}};
    double thresholdRuang = 0.2;
    /*4.653604925596985
      -2.9684983389949604
      4.656866815904792
      -2.9793218595303053
      4.569999589984137
      -3.290561230411397
      4.644866823647843
      -3.014862214425451
      */
    public ScanBeaconActivity() {
        super();
    }
    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_listbeacon);
        ListBeacon = new ArrayList<CBBeacon>();
        beaconlistView = (ListView) findViewById(R.id.beacon_list_view);
        adapter = new BeaconListAdapter(this, R.layout.list_item_row,R.id.firstLine,  ListBeacon);
        // Assign adapter to ListView
        beaconlistView.setAdapter(adapter);
    }
    @Override
    public void onEnterBeacon(CBBeacon beacon) {
        // do something when beacon entered region
        CBCampaignType campaign = beacon.getStoryline().getCampaign();
        Log.d("Application", "Entered Beacon");
        //Toast.makeText(getApplicationContext(),"Anda Masuk di Ruangan A",Toast.LENGTH_SHORT).show();
        //double positions[][] = {{10.9,0.2},{4.0,4.0},{1.0,3.0}};
        //double distances[] = {1.5,2.0,3.0};
        //ArrayList<CBBeacon>  bss = new ArrayList<CBBeacon>
        //double result_tri[] = getTrilaterationP(positions,distances);
        checkBeacon(beacon);
        if(campaign.equals(CBCampaignType.IMAGE)){
            // display a brochure image
        } else if(campaign.equals(CBCampaignType.HTML)){
            // show html page via webview
        } else if(campaign.equals(CBCampaignType.URL)){
            // open url in a webview/browser
        } else if(campaign.equals(CBCampaignType.VIDEO)){
            // play a video streaming
        }
    }
    @Override
    public void onExitBeacon(CBBeacon beacon, long timeInterval) {
        // do something when beacon exited region
        //Toast.makeText(getApplicationContext(),"Anda Meninggalkan di Ruangan A",Toast.LENGTH_SHORT).show();
        Log.d("Application","Exited Beacon");
        checkBeacon(beacon);
    }
    @Override
    public void onNearestBeaconChanged(CBBeacon old, CBBeacon current) {
        // do something when beacon proximity is immediate
        Log.d("Application", "Immediate Beacon");
        //checkBeacon(current);
        if(ListBeacon.size() > 0) {
            //Toast.makeText(ScanBeaconActivity.this, "Nearest:"+old.getMinor()+",current:"+current.getMinor(), Toast.LENGTH_SHORT).show();
            //checkPosisionUSer();
            getXandYUser();
            //a.setListBeacon(ListBeacon);
            /*for (int i = 0; i < ListBeacon.size(); i++) {
                CBBeacon beacons = ListBeacon.get(i);
                Log.d("near list beacon : ", beacons.getBeaconID());
            }
            double[] xAndYUser = getXandYUser();
            Log.d("result Tri X : " ,String.valueOf(xAndYUser[0]));
            Log.d("result Tri Y : " ,String.valueOf(xAndYUser[1]));
            Toast.makeText(getApplicationContext()," Posisi X : "+String.valueOf(xAndYUser[0])+" Posisi Y : " +String.valueOf(xAndYUser[1]),Toast.LENGTH_SHORT).show();*/
        }
        checkBeacon(current);
    }
    @Override
    public void onEmptyBeacon() {
        // do something when no beacon detected
        Log.d("Application","Empty Beacon");
        //Toast.makeText(ScanBeaconActivity.this, "Empty Beacon", Toast.LENGTH_SHORT).show();
    }
    @Override
    public void onImmediateBeacon(CBBeacon beacon) {
        // do something when beacon proximity is immediate
        Log.d("Application", "Immediate Beacon");
        //Toast.makeText(ScanBeaconActivity.this, "Immediate:"+beacon.getMinor(), Toast.LENGTH_SHORT).show();
        checkBeacon(beacon);
    }
    @Override
    public void onNearBeacon(CBBeacon beacon) {
        //Toast.makeText(ScanBeaconActivity.this, "Near"+beacon.getMinor(), Toast.LENGTH_SHORT).show();
        // do something when nearest beacon changed
        //Log.d("Application", "Nearest Beacon");
        //Toast.makeText(getApplicationContext(),"Anda Sudah Dekat di Ruangan A",Toast.LENGTH_SHORT).show();
        //double positions[][] = {{10.9,0.2},{4.0,4.0},{1.0,3.0}};
        //if(ListBeacon.size() > 0) {
        //xAndYUser = a.getXandYUser();
        //a.getXandYUser();
        //Log.d("result Tri X : " ,String.valueOf(xAndYUser[0]));
        //Log.d("result Tri Y : " ,String.valueOf(xAndYUser[1]));
        //Toast.makeText(getApplicationContext()," Posisi X : "+String.valueOf(xAndYUser[0])+" Posisi Y : " +String.valueOf(xAndYUser[1]),Toast.LENGTH_SHORT).show();
        //}
    }
    @Override
    public void onFarBeacon(CBBeacon beacon) {
        // do something when beacon proximity is far
        Log.d("Application","Far Beacon");
        //Toast.makeText(ScanBeaconActivity.this, "Far:"+beacon.getMinor(), Toast.LENGTH_SHORT).show();
        //Toast.makeText(getApplicationContext(),"Anda Jauh Dari Zona Beacon",Toast.LENGTH_SHORT).show();
        checkBeacon(beacon);
    }
    /* Fungsi yang mengecek beacon mana saja yang pernah dideteksi*/
    public void checkBeacon(CBBeacon beacon){
        Log.d("ErrorBeacon","Logging "+beacon.getMajor());
        if (!ListBeacon.contains(beacon)){
            ListBeacon.add(beacon);
            adapter.notifyDataSetChanged();
        }
    }
    public double[] getTrilaterationP(double[][] positions, double[] distances){
        double CAB,CBC,xTarget,yTarget,xFilter;
        CAB = distances[0]*distances[0] - distances[1]*distances[1] - positions[0][0]*positions[0][0] - positions[0][1]*positions[0][1] + positions[1][0]*positions[1][0] + positions[1][1]*positions[1][1];
        CBC = distances[1]*distances[1] - distances[2]*distances[2] - positions[1][0]*positions[1][0] - positions[1][1]*positions[1][1] + positions[2][0]*positions[2][0] + positions[2][1]*positions[2][1];
        yTarget = (CAB * (positions[2][0]-positions[1][0]) - CBC*(positions[1][0]-positions[0][0])) / (2 * ((positions[1][1]-positions[0][1]) * (positions[2][0]-positions[1][0]) - (positions[2][1]-positions[1][1]) * (positions[1][0]-positions[0][0])));
        xTarget = (CAB - 2 * yTarget * (positions[1][1] - positions[0][1])) / (2 * (positions[1][0]-positions[0][0]));
        xFilter = (CBC - 2 * yTarget * (positions[2][1]-positions[1][1])) / (2 * (positions[2][0]-positions[1][0]));
        xTarget = (xTarget + xFilter) / 2;
        Log.d("Trilateration", "3 Circle , x : "+xTarget+" , y : "+yTarget);
        //return new Double2(xTarget,yTarget);
        double result[] = {xTarget,yTarget };
        // Log.d("Trilateration", "3 Circle , x : "+result);
        return result;
    }
    public double[] mytrialitation(double[][] positions, double[] distances){
        double y =0, x=0;
        double x_atas,x_bawah;
        String debug ="";
        //double positions[][] = {{6.5,12.5},{0.5,6.5},{5.5,0.5}};
        //double[] distances = {12,5, 4};
        //double[] distances = {1.5,3, 5.5};
        //double positions[][] = new double[3][3];
        for (int i=0;i< distances.length; i++){
            debug += "[" +i +": "+ distances[i]+"]";
        }
        Log.d(TAG,"distance debug "+debug);
        /*
        positions[0][0] = 6.5 ;
        positions[0][1] = 12.5 ;
        positions[1][0] = 0.5 ;
        positions[1][1] = 6.5 ;
        positions[2][0] = 5.5 ;
        positions[2][1] = 0.5 ;
        */
        debug = "";
        for (int i=0;i< positions.length; i++){
            for (int j=0;j< positions[i].length; j++) {
                debug += "[" + i + " "+ j+ ": " + positions[i][j] + "]";
            }
        }
        Log.d(TAG,"pos debug "+debug);
        x_atas =((distances[0]* distances[0]) - (distances[1]* distances[1]) + (positions[1][0]* positions[1][0]) - (positions[0][0]* positions[0][0]) + (positions[1][1]* positions[1][1]) - (positions[0][1]* positions[0][1]))
                * (2*(positions[2][1] - positions[1][1])) -
                ((distances[1]* distances[1]) - (distances[2]* distances[2]) + (positions[2][0]* positions[2][0]) - (positions[1][0]* positions[1][0]) + (positions[2][1]* positions[2][1]) - (positions[1][1]* positions[1][1]))
                        * (2*(positions[1][1] - positions[0][1]));
        x_bawah = ((2*(positions[1][0] - positions[2][0])) * (2*(positions[1][1] - positions[0][1]))) - ((2*(positions[0][0] - positions[1][0])) * (2*(positions[2][1] - positions[1][1])));
        x = x_atas/x_bawah;
        Log.d(TAG,"X Atas "+x_atas+" X Bawah "+x_bawah);
        y =( ((distances[0] * distances[0]) - (distances[1]*distances[1]) + (positions[1][0]*positions[1][0]) - (positions[0][0]*positions[0][0]) + (positions[1][1]*positions[1][1]) - (positions[0][1]*positions[0][1])) +
                (x*2*(positions[0][0] - positions[1][0])) ) / (2*(positions[1][1] - positions[0][1]));
        double result[] = {x,y };
        Log.d(TAG, "X Y Baru"+x+" "+y);
        return result;
    }
    public double calculateAccuracy(int txPower, double rssi) {
        if (rssi == 0) {
            return -1.0; // if we cannot determine accuracy, return -1.
        }
        Log.d("avg mRssi: %s", String.valueOf(txPower));
        Log.d("avg txpower: %s", String.valueOf(txPower));
        double ratio = rssi*1.0/txPower;
        double accuracy;
        if (ratio < 1.0) {
            return Math.pow(ratio,10);
        }
        else {
            accuracy =  (0.89976)*Math.pow(ratio,7.7095) + 0.111;
            Log.d("hbbr", " avg rssi: "+rssi+" accuracy: "+accuracy);
            return accuracy;
        }
    }
    public double[] getXandYUser() {
        double result[] = {0,0};
        if(ListBeacon.size() > 0) {
            //double[] distance = getDataSortBeacon(listNearBeacon(), 3);
            double[] distance = {12,5, 4};
            Log.d(TAG, "getXandUser init");
            if(distance.length > 0){
                Log.d(TAG, "getXandUser onok lenght");
                for (int i= 0; i < distance.length;i++){
                    Log.d(TAG, "Jarak Distance:"+String.valueOf(distance[i]));
                }
                Log.d(TAG, "distance getXandUser");
                //double positions[][] = {{4.0,7.0},{6.0,3.0},{14.0,8.0},{13.0,2.0}};
                //lailatul
                //double positions[][] = {{6.5,12.5},{0.5,6.5},{5.5,0.5}};
                double positions[][] = new double[3][3];
                positions[0][0] = 6.5 ;
                positions[0][1] = 12.5 ;
                positions[1][0] = 0.5 ;
                positions[1][1] = 6.5 ;
                positions[2][0] = 5.5 ;
                positions[2][1] = 0.5 ;
                for (int i= 0; i < positions.length;i++){
                    for (int j= 0; j < positions[i].length;j++) {
                        Log.d(TAG, "Jarak Position" + i + ":" + String.valueOf(positions[i][j]));
                    }
                }
                result = mytrialitation(positions, distance);
                Log.d(TAG, "triitlator getXandUser");
                if(result.length > 0){
                    Log.d(TAG, "result Tri X : " +String.valueOf(result[0]));
                    Log.d(TAG, "result Tri Y : " +String.valueOf(result[1]));
                    Toast.makeText(ScanBeaconActivity.this, "Posisi X : "+result[0] +" Posisi Y : "+result[1], Toast.LENGTH_SHORT).show();
                    //holder.TenLine.setText("Posisi X : "+result_tri[0] +" Posisi Y : "+result_tri[1]);
                }
            }
        }
        return result;
    }
    public double[][] listNearBeacon (){
        double result[][] = new double[6][6];
        if(ListBeacon.size() > 0) {
            double[][] sortBeacon = new double[6][6];
            Log.d(TAG, "permulaan sort");
            double r = 0;
            for (int i = 0; i < ListBeacon.size(); i++){
                CBBeacon beacons = ListBeacon.get(i);
                double calcProximity = calculateAccuracy(beacons.getMeasuredPower(),beacons.getRssi());
                //unik beacon
                sortBeacon[i][0] = beacons.getMajor();
                sortBeacon[i][1] = beacons.getMeasuredPower();
                sortBeacon[i][2] = beacons.getRssi();
                if(ListBeacon.get(i).getMajor() == 1){
                    r = 6;
                }else if(ListBeacon.get(i).getMajor() == 2){
                    r = 2.5;
                }else if(ListBeacon.get(i).getMajor() == 3) {
                    r = 2;
                }
                Log.d(TAG, "R Jarak:"+r+" Beacon: "+beacons.getMajor());
                sortBeacon[i][3] = r;
            }
            Log.d(TAG, "durung sort");
            java.util.Arrays.sort(sortBeacon, new java.util.Comparator<double[]>() {
                public int compare(double[] a, double[] b) {
                    return Double.compare(a[3], b[3]);
                }
            });
            Log.d(TAG, "sakwise sort");
            for (int i = 0;i < sortBeacon.length;i++) {
                Log.d(TAG, "sakwise sort: "+ String.valueOf(sortBeacon[i][0] +" " + sortBeacon[i][1] +" " + sortBeacon[i][2] + sortBeacon[i][3]));
            }
            for (int i = 0;i < sortBeacon.length;i++) {
                if(result.length == 3){
                    break;
                }
                for (int j = 0; j < sortBeacon[i].length; j++) {
                    result[i][j] = sortBeacon[i][j];
                }
            }
            printArrayMulti(result);
            //changeItemListView();
            notifAdapter();
            Log.d(TAG, "wes diitung near");
        }
        return result;
    }
    public void printArrayMulti(double[][] arr){
        if(arr.length > 0){
            String result = "";
            for (int i = 0; i < arr.length; i++){
                result = "";
                for (int j = 0; j < arr[i].length; j++) {
                    result += "[i:"+i+"j:"+j+"v:"+ String.valueOf(arr[i][j])+"]";
                }
                Log.d(TAG, "print array multi "+ result);
            }
        }
    }
    public void checkPosisionUSer(){
    }
    public double[][] getNearestRoom(){
        double[][] result ={};
        getRoomInsideTriangular();
        return result;
    }
    public double[][] getRoomInsideTriangular(){
        double [][] testVariabel = {};
        return testVariabel;
    }
    private double[] getDataSortBeacon(double[][] sortBeacon,int indexData){
        double result[] = new double[3];
        int b = 0;
        //printArrayMulti(sortBeacon);
        //return result;
        Log.d("sortdatabeacon","sortdatabeacon permulaan");
        if(sortBeacon.length > 0){
            for (int i = 0;i < sortBeacon.length;i++) {
                if(sortBeacon[i].length > 0){
                    for (int j = 0; j < sortBeacon[i].length; j++) {
                        if (b > 2){
                            return result;
                        }
                        Log.d("sort databeacon", "sort databeacon " +sortBeacon[i][j]);
                        if(j == indexData){
                            Log.d(TAG, "hasil getdata" +sortBeacon[i][j]);
                            result[b] = sortBeacon[i][j];
                            b++;
                        }
                    }
                }
            }
            Log.d("sortdatabeacon","sortdatabeacon mari sort");
        }
        Log.d("sortdatabeacon","sortdatabeacon hasil");
        return result;
    }
    private double getDataSpesificSortBeacon(double[][] sortBeacon, int indexBeacon, int indexData){
        double result = 0;
        if(sortBeacon.length > 0){
            for (int i = 0;i < sortBeacon.length;i++) {
                if(indexBeacon == i){
                    for (int j = 0; j < sortBeacon.length; j++) {
                        if(j == indexData){
                            result = sortBeacon[i][j];
                            break;
                        }
                    }
                }
            }
        }
        return result;
    }
    private void notifAdapter() {
        runOnUiThread(new Runnable() {
            public void run() {
                //beaconlistView.invalidate();
                adapter.notifyDataSetChanged();
            }
        });
    }
    private void changeItemListView(double[][] sortBeacon){
    }
}
